1. You can access action creators from the public API. So if `foo` needs to dispatch an action in `bar` module it can simply invoke `dispatch(bar.actions.doThatThing())`. This might change the state of `bar`, which is fine. When we need to query data from `bar`, you can use `bar.selectors.getThatThing(state)`.

2. In a lot of cases components aren't that reusable within an application, at least that's what I find. If you want you can even separate `todos` and `redux-module-todos`. The latter will contain actions, reducer, etc. (Duck-style). I just find that keeping everything in `todos` makes it easier for me to think about the data flow of a feature because everything is local to the module. It's related to discussions about making reusable, composable redux applications, rather than keeping components and state completely decoupled.